/*  VALORES PRIMITIVOS E POR REFERENCIA
    
    PRIMITIVOS (IMUTAVEIS): string - number - boolean - undefined - null (bigint, symbol) 
    let n1 = 'luiz'
    n1[2] = 'w' // TODOS ESSES VALORES PRIMITIVOS SÃO IMUTAVEIS
    
    let n1 = 'a'
    let n2 = n1 // NESSE CASO N2 ESTA FAZENDO UMA COPIA DE N1 E N2 SE TORNA UM VALOR INDEPENDENTE DE N1, EM ARRAYS OU OBJETOS ISSO NÃO É POSSIVEL


    REFERENCIA (MUTAVEL): array - object - function 
    let a = [1,2,3,4]
    let b = a // NESSE MOMENTO B ESTA RECEBENDO O VALORES IGUAIS AOS DE A, MAS SE MUDAR O VALOR O DE B OU DE A AMBOS SERA MUDADO JUNTO, POIS EXISTE UMA LIGAÇÃO ENTRE ELES

    RESUMO

        A MAIOR DIFERENÇA ENTRE VALORES POR REFENCIA E VALORES PRIMITIVOS SÀO: 

        PRIMITIVOS: OS TIPOS DELES SÃO IMUTAVEIS( STRING, NUMBER, BOLEEAN), MAS OS SEUS VALORES SÃO MUTAVEIS E PODEM SER ATE COPIADOS DENTRO DE OUTRAS 
        VARIAVEIS E ESSE VALORES SE TORNAREM INDEPENDENTES.

        let n1 = 'baba';
        let n2 = n1; // N2 É INDEPENDENTE DE N1, SE EU ALTERAR O VALOR DE N1 O VALOR DE N2 CONTINUARA SENDO O MESMO 
        
        REFERENCIA: JA POR REFERENCIA SÃO SEUS TIPOS SÃO MUTAVEIS, MAS AO TENTAR FAZER UMA COPIA DE UMA VARIAVEL PARA OUTRA OS VALORES ESTÀO INTERLIGADOS E AO MODIFICAR UM VALOR O OUTRO TBM SERA MODIFICADO JUNTO
        let n1 = [1,2,3,4];
        let n2 = n1; // N2 AQUI TEM O MESMO VALOR DE N1, MAS SE EU FIZER UMA MUDANÇA EM N2 CONSEQUENTEMENTE N1 TAMBEM SERA ALTERADO
        

*/


let a = [1,2,3,4];
let b = a;
console.log(b)
b.push(5)
console.log(a)